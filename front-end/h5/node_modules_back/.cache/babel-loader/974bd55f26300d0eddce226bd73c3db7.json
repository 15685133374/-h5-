{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\page-manager\\index.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\page-manager\\index.js","mtime":1575872424776},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["export default {\n  props: {\n    pages: {\n      required: false,\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    editingPage: {\n      type: Object,\n      default: function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      hoverIndex: -1,\n      // 显示编辑按钮\n      editingTitle: '' // 临时缓存当前编辑的 title，点击 Yes 再真正用其更新 page title\n\n    };\n  },\n  methods: {\n    getTitle: function getTitle(page, index) {\n      return page.title || this.$t('editor.pageManager.title', {\n        index: index\n      });\n    },\n    _renderEditTitle: function _renderEditTitle(page, index) {\n      var _this = this;\n\n      var h = this.$createElement;\n      return h(\"a-popconfirm\", {\n        \"attrs\": {\n          \"placement\": \"bottom\",\n          \"okText\": \"Yes\",\n          \"cancelText\": \"No\"\n        },\n        \"on\": {\n          \"confirm\": function confirm() {\n            _this.$emit('editTitle', {\n              newTitle: _this.editingTitle,\n              pageIndexForEditingTitle: index\n            });\n          },\n          \"cancel\": function cancel() {}\n        }\n      }, [h(\"a-input\", {\n        \"slot\": \"title\",\n        \"attrs\": {\n          \"value\": this.editingTitle,\n          \"size\": \"small\"\n        },\n        \"on\": {\n          \"change\": function change(e) {\n            _this.editingTitle = e.target.value;\n          }\n        }\n      }), h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"edit\"\n        },\n        \"on\": {\n          \"click\": function click(e) {\n            e.stopPropagation(); // 将 click icon 与 click page item 隔离开。编辑标题的同时不要切换页面\n\n            _this.editingTitle = _this.getTitle(page, index);\n          }\n        }\n      })]);\n    },\n    _renderTitleMenu: function _renderTitleMenu(page, index) {\n      var _this2 = this;\n\n      var h = this.$createElement;\n      var addPageText = this.$t('editor.pageManager.action.add');\n      var copyPageText = this.$t('editor.pageManager.action.copy');\n      var deletePageText = this.$t('editor.pageManager.action.delete');\n      return h(\"a-dropdown\", {\n        \"attrs\": {\n          \"trigger\": ['hover'],\n          \"placement\": 'bottomCenter'\n        }\n      }, [h(\"a\", {\n        \"class\": \"ml-2\",\n        \"attrs\": {\n          \"href\": \"#\"\n        }\n      }, [h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"down\"\n        }\n      })]), h(\"a-menu\", {\n        \"slot\": \"overlay\",\n        \"on\": {\n          \"click\": function click(_ref) {\n            var key = _ref.key;\n            return _this2.$emit('selectMenuItem', key);\n          }\n        }\n      }, [h(\"a-menu-item\", {\n        \"key\": \"add\"\n      }, [h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"plus\"\n        }\n      }), addPageText]), h(\"a-menu-item\", {\n        \"key\": \"copy\"\n      }, [h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"copy\"\n        }\n      }), copyPageText]), h(\"a-menu-item\", {\n        \"key\": \"delete\"\n      }, [h(\"a-icon\", {\n        \"attrs\": {\n          \"type\": \"delete\"\n        }\n      }), deletePageText])])]);\n    },\n    onLeave: function onLeave() {\n      this.hoverIndex = -1;\n    }\n  },\n  render: function render(h) {\n    var _this3 = this;\n\n    var addPageText = this.$t('editor.pageManager.action.add');\n    return h(\"div\", {\n      \"class\": \"page-manager-panel\"\n    }, [this.pages.map(function (page, index) {\n      return h(\"span\", {\n        \"class\": ['cursor-pointer', 'page-manager-panel__item', page.uuid === _this3.editingPage.uuid && 'active'],\n        \"on\": {\n          \"click\": function click() {\n            _this3.$emit('selectPage', index);\n          },\n          \"mouseenter\": function mouseenter() {\n            _this3.hoverIndex = index;\n          }\n        }\n      }, [h(\"span\", [h(\"a-badge\", {\n        \"attrs\": {\n          \"count\": index + 1,\n          \"numberStyle\": {\n            backgroundColor: '#fff',\n            color: '#999',\n            boxShadow: '0 0 0 1px #d9d9d9 inset'\n          }\n        }\n      }), h(\"span\", {\n        \"class\": \"ml-3\"\n      }, [_this3.getTitle(page, index)])]), h(\"span\", [_this3.hoverIndex === index && _this3._renderEditTitle(page, index), _this3._renderTitleMenu(page, index)])]);\n    })]);\n  }\n};",null]}