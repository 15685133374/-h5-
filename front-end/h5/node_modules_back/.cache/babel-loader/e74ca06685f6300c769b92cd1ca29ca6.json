{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-checkbox-group.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-checkbox-group.js","mtime":1575526862292},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport LbpFormRadio from \"./lbp-form-radio.js\";\n\nfunction getDefaultItems() {\n  // defaultItems.slice(0)[0] === defaultItems.slice(0)[0] -> true\n  // Object.assign(defaultItems)[0] === Object.assign(defaultItems)[0] -> true\n  // clone = (val) => JSON.parse(JSON.stringify(val))\n  // clone(defaultItems)[0] === clone(defaultItems)[0] -> false\n  var defaultItems = [{\n    value: '选项A'\n  }, {\n    value: '选项B'\n  }, {\n    value: '选项C'\n  }];\n  return defaultItems;\n}\n\nexport default {\n  name: 'lbp-form-checkbox-group',\n  components: {\n    LbpFormRadio: LbpFormRadio\n  },\n  props: {\n    aliasName: {\n      type: String,\n      default: \"\\u6807\\u9898\\u6F14\\u793A\",\n      editor: {\n        type: 'a-input',\n        label: '填写标题',\n        require: true\n      }\n    },\n    items: {\n      type: Array,\n      default: function _default() {\n        return getDefaultItems();\n      },\n      editor: {\n        type: 'lbs-prop-text-enum-editor',\n        label: '选项列表',\n        require: true\n      }\n    },\n    type: {\n      type: String,\n      default: 'checkbox',\n      editor: {\n        type: 'a-radio-group',\n        label: '选择模式',\n        require: true,\n        prop: {\n          options: [{\n            label: '单选',\n            value: 'radio'\n          }, {\n            label: '多选',\n            value: 'checkbox'\n          }],\n          name: 'mode'\n        }\n      }\n    }\n  },\n  data: function data() {\n    return {\n      value: this.type === 'radio' ? '' : [],\n      uuid: undefined\n    };\n  },\n  computed: {\n    value_: function value_() {\n      if (this.type === 'radio') {\n        return this.value;\n      } else {\n        var value = Array.isArray(this.value) && this.value || [];\n        return value.join(',');\n      }\n    }\n  },\n  watch: {\n    type: function type(_type) {\n      this.value = _type === 'radio' ? '' : [];\n    }\n  },\n  mounted: function mounted() {\n    this.uuid = this.$el.dataset.uuid;\n  },\n  methods: {\n    /**\r\n     * @param {String, Number} val radioValue or checkboxValue\r\n     */\n    onChange: function onChange(val) {\n      switch (this.type) {\n        case 'radio':\n          this.toggleRadio(val);\n          break;\n\n        case 'checkbox':\n          this.toggleCheckbox(val);\n          break;\n\n        default:\n          break;\n      }\n    },\n    toggleCheckbox: function toggleCheckbox(val) {\n      var index = this.value.indexOf(val);\n\n      if (index === -1) {\n        this.value.push(val);\n      } else {\n        this.value.splice(index, 1);\n      }\n    },\n    toggleRadio: function toggleRadio(val) {\n      this.value = val;\n    }\n  },\n  render: function render() {\n    var _this = this;\n\n    var h = arguments[0];\n    return h(\"div\", [h(\"h3\", [this.aliasName]), h(\"input\", {\n      \"attrs\": {\n        \"type\": \"text\",\n        \"hidden\": true,\n        \"data-type\": \"lbp-form-input\",\n        \"data-uuid\": this.uuid\n      },\n      \"domProps\": {\n        \"value\": this.value_\n      }\n    }), this.items.map(function (item) {\n      return h(\"lbp-form-radio\", {\n        \"attrs\": {\n          \"vertical\": true,\n          \"value\": item.value,\n          \"checked\": _this.type === 'radio' ? _this.value === item.value : _this.value.includes(item.value),\n          \"aliasName\": _this.uuid,\n          \"type\": _this.type\n        },\n        \"on\": {\n          \"change\": _this.onChange\n        }\n      }, [item.value]);\n    })]);\n  }\n};",{"version":3,"sources":["D:/project/luban/luban-h5/front-end/h5/src/components/plugins/lbp-form-checkbox-group.js"],"names":["LbpFormRadio","getDefaultItems","defaultItems","value","name","components","props","aliasName","type","String","default","editor","label","require","items","Array","prop","options","data","uuid","undefined","computed","value_","isArray","join","watch","mounted","$el","dataset","methods","onChange","val","toggleRadio","toggleCheckbox","index","indexOf","push","splice","render","map","item","includes"],"mappings":"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","sourcesContent":["import LbpFormRadio from './lbp-form-radio.js'\r\n\r\nfunction getDefaultItems () {\r\n  // defaultItems.slice(0)[0] === defaultItems.slice(0)[0] -> true\r\n  // Object.assign(defaultItems)[0] === Object.assign(defaultItems)[0] -> true\r\n  // clone = (val) => JSON.parse(JSON.stringify(val))\r\n  // clone(defaultItems)[0] === clone(defaultItems)[0] -> false\r\n  const defaultItems = [\r\n    {\r\n      value: '选项A'\r\n    },\r\n    {\r\n      value: '选项B'\r\n    },\r\n    {\r\n      value: '选项C'\r\n    }\r\n  ]\r\n\r\n  return defaultItems\r\n}\r\n\r\nexport default {\r\n  name: 'lbp-form-checkbox-group',\r\n  components: {\r\n    LbpFormRadio\r\n  },\r\n  props: {\r\n    aliasName: {\r\n      type: String,\r\n      default: `标题演示`,\r\n      editor: {\r\n        type: 'a-input',\r\n        label: '填写标题',\r\n        require: true\r\n      }\r\n    },\r\n    items: {\r\n      type: Array,\r\n      default: () => getDefaultItems(),\r\n      editor: {\r\n        type: 'lbs-prop-text-enum-editor',\r\n        label: '选项列表',\r\n        require: true\r\n      }\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'checkbox',\r\n      editor: {\r\n        type: 'a-radio-group',\r\n        label: '选择模式',\r\n        require: true,\r\n        prop: {\r\n          options: [\r\n            { label: '单选', value: 'radio' },\r\n            { label: '多选', value: 'checkbox' }\r\n          ],\r\n          name: 'mode'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      value: this.type === 'radio' ? '' : [],\r\n      uuid: undefined\r\n    }\r\n  },\r\n  computed: {\r\n    value_ () {\r\n      if (this.type === 'radio') {\r\n        return this.value\r\n      } else {\r\n        const value = (Array.isArray(this.value) && this.value) || []\r\n        return value.join(',')\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    type (type) {\r\n      this.value = type === 'radio' ? '' : []\r\n    }\r\n  },\r\n  mounted () {\r\n    this.uuid = this.$el.dataset.uuid\r\n  },\r\n  methods: {\r\n    /**\r\n     * @param {String, Number} val radioValue or checkboxValue\r\n     */\r\n    onChange (val) {\r\n      switch (this.type) {\r\n        case 'radio':\r\n          this.toggleRadio(val)\r\n          break\r\n        case 'checkbox':\r\n          this.toggleCheckbox(val)\r\n          break\r\n        default:\r\n          break\r\n      }\r\n    },\r\n    toggleCheckbox (val) {\r\n      const index = this.value.indexOf(val)\r\n      if (index === -1) {\r\n        this.value.push(val)\r\n      } else {\r\n        this.value.splice(index, 1)\r\n      }\r\n    },\r\n    toggleRadio (val) {\r\n      this.value = val\r\n    }\r\n  },\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h3>{this.aliasName}</h3>\r\n        <input type=\"text\" hidden value={this.value_} data-type=\"lbp-form-input\" data-uuid={this.uuid} />\r\n        {\r\n          this.items.map(item => (\r\n            <lbp-form-radio\r\n              vertical\r\n              value={item.value}\r\n              checked={this.type === 'radio' ? this.value === item.value : this.value.includes(item.value)}\r\n              aliasName={this.uuid}\r\n              type={this.type}\r\n              onChange={this.onChange}\r\n            >{item.value}</lbp-form-radio>\r\n          ))\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]}]}