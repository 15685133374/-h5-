{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-button.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-button.js","mtime":1575889551897},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport commonProps from \"./common/props.js\";\nexport default {\n  render: function render() {\n    var h = arguments[0];\n    var color = this.color,\n        textAlign = this.textAlign,\n        backgroundColor = this.backgroundColor,\n        fontSize = this.fontSize,\n        lineHeight = this.lineHeight,\n        borderColor = this.borderColor,\n        borderRadius = this.borderRadius,\n        borderWidth = this.borderWidth,\n        text = this.text,\n        disabled = this.disabled;\n    var style = {\n      color: color,\n      textAlign: textAlign,\n      backgroundColor: backgroundColor,\n      fontSize: fontSize,\n      lineHeight: lineHeight + 'em',\n      borderColor: borderColor,\n      borderRadius: borderRadius + 'px',\n      borderWidth: borderWidth + 'px',\n      textDecoration: 'none',\n      disabled: disabled\n    };\n    return h(\"button\", {\n      \"attrs\": {\n        \"type\": \"submit\"\n      },\n      \"style\": style,\n      \"on\": {\n        \"click\": this.handleClick\n      }\n    }, [text]);\n  },\n  name: 'lbp-form-button',\n  props: {\n    text: commonProps.text(),\n    vertical: commonProps.vertical,\n    backgroundColor: commonProps.backgroundColor,\n    color: commonProps.color,\n    fontSize: commonProps.fontSize,\n    lineHeight: commonProps.lineHeight,\n    borderWidth: commonProps.borderWidth,\n    borderRadius: commonProps.borderRadius,\n    borderColor: commonProps.borderColor,\n    textAlign: commonProps.textAlign()\n  },\n  methods: {\n    handleClick: function handleClick() {\n      if (this.disabled) return;\n      var val1 = document.querySelector('input').value;\n      document.querySelector('input').required = 'true'; //  oninvalid=\"setCustomValidity('不能为空')\" oninput=\"setCustomValidity('')\"\n\n      document.querySelector('input').setAttribute(\"oninvalid\", \"setCustomValidity('不能为空')\");\n      var val2 = document.getElementsByTagName('input')[1].value;\n\n      if (val1 != '' && val2 != '') {\n        // #!zh: data-type=lbp-form-input 在 lbp-form-input 组件中定义\n        var inputs = document.querySelectorAll(\"[data-type^='lbp-form-input']\");\n        if (!inputs.length) return;\n        var self = this;\n        var formData = new FormData(); // console.log(document.getElementsByName('name').value)\n\n        if (document.getElementsByName('name').value == '') {\n          confirm(\"输入项不能为空\");\n          return;\n        }\n\n        inputs.forEach(function (input) {\n          return formData.append(input.dataset.uuid, input.value);\n        });\n        var req = new XMLHttpRequest();\n\n        req.onreadystatechange = function () {\n          if (req.readyState === 4) {\n            var message = req.status === 200 ? '提交成功' : '提交失败'; // self.$message.info(message)\n\n            confirm(message);\n          }\n        }; // #!zh: vuex.module.editor.setWork 中定义\n\n\n        var workId = window.__work.id; // TODO #!zh: 可以动态配置表单提交地址\n\n        req.open('post', \"/works/form/submit/\".concat(workId), true);\n        req.send(formData);\n      }\n    }\n  },\n  editorConfig: {\n    components: {\n      'lbs-select-input-type': {\n        props: ['value'],\n        computed: {\n          value_: {\n            get: function get() {\n              return this.value;\n            },\n            set: function set(val) {\n              this.$emit('input', val);\n            }\n          }\n        },\n        template: \"\\n          <a-select v-model=\\\"value_\\\" placeholder=\\\"\\u7C7B\\u578B\\\">\\n            <a-option\\n              v-for=\\\"item in options\\\"\\n              :key=\\\"item.value\\\"\\n              :label=\\\"item.label\\\"\\n              :value=\\\"item.value\\\">\\n            </a-option>\\n          </a-select>\\n        \",\n        data: function data() {\n          return {\n            options: [{\n              label: '文字',\n              value: 'text'\n            }, {\n              label: '密码',\n              value: 'password'\n            }, {\n              label: '日期',\n              value: 'date'\n            }, {\n              label: '邮箱',\n              value: 'email'\n            }, {\n              label: '手机号',\n              value: 'tel'\n            }]\n          };\n        }\n      }\n    }\n  }\n};",null]}