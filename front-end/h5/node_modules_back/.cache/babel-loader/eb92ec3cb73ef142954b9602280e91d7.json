{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\element.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\element.js","mtime":1575526862392},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _defineProperty from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Element from \"../../components/core/models/element\";\nimport { getEditorConfigForEditingElement, swapZindex, getVM } from \"../../utils/element\"; // actions\n\nexport var actions = {\n  setEditingElement: function setEditingElement(_ref, payload) {\n    var commit = _ref.commit;\n    commit('setEditingElement', payload);\n    var vm = payload && payload.name ? getEditorConfigForEditingElement(payload.name) : null;\n    commit('setEditingElementEditorConfig', vm);\n    window.getEditorApp.$emit('setEditingElement');\n  },\n  setElementPosition: function setElementPosition(_ref2, payload) {\n    var commit = _ref2.commit;\n    commit('setElementCommonStyle', payload);\n  },\n  setElementShape: function setElementShape(_ref3, payload) {\n    var commit = _ref3.commit;\n    commit('setElementCommonStyle', payload);\n  },\n  recordElementRect: function recordElementRect(_ref4) {\n    var commit = _ref4.commit;\n    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    commit('recordRect', payload);\n  },\n  elementManager: function elementManager(_ref5, payload) {\n    var commit = _ref5.commit;\n    commit('elementManager', payload);\n  }\n}; // mutations\n\nexport var mutations = {\n  setEditingElement: function setEditingElement(state, payload) {\n    state.editingElement = payload;\n  },\n  setEditingElementEditorConfig: function setEditingElementEditorConfig(state, payload) {\n    state.editingElementEditorConfig = payload;\n  },\n  setElementCommonStyle: function setElementCommonStyle(state, payload) {\n    state.editingElement.commonStyle = _objectSpread({}, state.editingElement.commonStyle, {}, payload);\n  },\n  elementManager: function elementManager(state, _ref6) {\n    var type = _ref6.type,\n        value = _ref6.value;\n    var editingPage = state.editingPage,\n        editingElement = state.editingElement;\n    var elements = editingPage.elements;\n    var len = elements.length;\n\n    switch (type) {\n      case 'add':\n        // value.name => pluginName\n        var _value = value,\n            name = _value.name;\n        var vm = getVM(value.name);\n        var props = vm.$options.props;\n        value = _objectSpread({}, value, {\n          zindex: len + 1\n        });\n        var element = new Element({\n          name: name,\n          editorConfig: props\n        });\n        elements.push(element);\n        break;\n\n      case 'copy':\n        elements.push(state.editingElement.clone({\n          zindex: len + 1\n        }));\n        break;\n\n      case 'delete':\n        {\n          var index = elements.findIndex(function (e) {\n            return e.uuid === editingElement.uuid;\n          });\n\n          if (index !== -1) {\n            // let newElements = elements.slice()\n            // newElements.splice(index, 1)\n            // state.editingPage.elements = newElements\n            state.editingPage.elements.splice(index, 1);\n          }\n\n          state.editingElement = null;\n        }\n        break;\n\n      case 'move2Top':\n      case 'move2Bottom':\n        {\n          var _index = elements.findIndex(function (e) {\n            return e.uuid === editingElement.uuid;\n          });\n\n          elements.splice(_index, 1);\n          var newElements = type === 'move2Top' ? [].concat(_toConsumableArray(elements), [editingElement]) : [editingElement].concat(_toConsumableArray(elements));\n          newElements.forEach(function (ele, i, arr) {\n            ele.commonStyle.zindex = i + 1;\n          });\n          state.editingPage.elements = newElements;\n        }\n        break;\n\n      case 'addZindex':\n      case 'minusZindex':\n        var maxZindex = elements.length;\n        var eleZindex = editingElement.commonStyle.zindex;\n        if (eleZindex === maxZindex || eleZindex === 1) return;\n        var flag = type === 'addZindex' ? 1 : -1;\n        var swapElement = elements.find(function (ele) {\n          return ele.commonStyle.zindex === eleZindex + flag * 1;\n        });\n        swapZindex(editingElement, swapElement);\n        break;\n\n      default:\n    }\n  },\n  recordRect: function recordRect(state, _ref7) {\n    var type = _ref7.type,\n        value = _ref7.value;\n  }\n};",{"version":3,"sources":["d:/project/luban/luban-h5/front-end/h5/src/store/modules/element.js"],"names":["Element","getEditorConfigForEditingElement","swapZindex","getVM","actions","setEditingElement","payload","commit","vm","name","window","getEditorApp","$emit","setElementPosition","setElementShape","recordElementRect","elementManager","mutations","state","editingElement","setEditingElementEditorConfig","editingElementEditorConfig","setElementCommonStyle","commonStyle","type","value","editingPage","elements","len","length","props","$options","zindex","element","editorConfig","push","clone","index","findIndex","e","uuid","splice","newElements","forEach","ele","i","arr","maxZindex","eleZindex","flag","swapElement","find","recordRect"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,OAAP;AACA,SAASC,gCAAT,EAA2CC,UAA3C,EAAuDC,KAAvD,8B,CAEA;;AACA,OAAO,IAAMC,OAAO,GAAG;AACrBC,EAAAA,iBADqB,mCACUC,OADV,EACmB;AAAA,QAAnBC,MAAmB,QAAnBA,MAAmB;AACtCA,IAAAA,MAAM,CAAC,mBAAD,EAAsBD,OAAtB,CAAN;AAEA,QAAME,EAAE,GAAIF,OAAO,IAAIA,OAAO,CAACG,IAApB,GAA4BR,gCAAgC,CAACK,OAAO,CAACG,IAAT,CAA5D,GAA6E,IAAxF;AACAF,IAAAA,MAAM,CAAC,+BAAD,EAAkCC,EAAlC,CAAN;AAEAE,IAAAA,MAAM,CAACC,YAAP,CAAoBC,KAApB,CAA0B,mBAA1B;AACD,GARoB;AASrBC,EAAAA,kBATqB,qCASWP,OATX,EASoB;AAAA,QAAnBC,MAAmB,SAAnBA,MAAmB;AACvCA,IAAAA,MAAM,CAAC,uBAAD,EAA0BD,OAA1B,CAAN;AACD,GAXoB;AAYrBQ,EAAAA,eAZqB,kCAYQR,OAZR,EAYiB;AAAA,QAAnBC,MAAmB,SAAnBA,MAAmB;AACpCA,IAAAA,MAAM,CAAC,uBAAD,EAA0BD,OAA1B,CAAN;AACD,GAdoB;AAerBS,EAAAA,iBAfqB,oCAewB;AAAA,QAAxBR,MAAwB,SAAxBA,MAAwB;AAAA,QAAdD,OAAc,uEAAJ,EAAI;AAC3CC,IAAAA,MAAM,CAAC,YAAD,EAAeD,OAAf,CAAN;AACD,GAjBoB;AAkBrBU,EAAAA,cAlBqB,iCAkBOV,OAlBP,EAkBgB;AAAA,QAAnBC,MAAmB,SAAnBA,MAAmB;AACnCA,IAAAA,MAAM,CAAC,gBAAD,EAAmBD,OAAnB,CAAN;AACD;AApBoB,CAAhB,C,CAuBP;;AACA,OAAO,IAAMW,SAAS,GAAG;AACvBZ,EAAAA,iBADuB,6BACJa,KADI,EACGZ,OADH,EACY;AACjCY,IAAAA,KAAK,CAACC,cAAN,GAAuBb,OAAvB;AACD,GAHsB;AAIvBc,EAAAA,6BAJuB,yCAIQF,KAJR,EAIeZ,OAJf,EAIwB;AAC7CY,IAAAA,KAAK,CAACG,0BAAN,GAAmCf,OAAnC;AACD,GANsB;AAOvBgB,EAAAA,qBAPuB,iCAOAJ,KAPA,EAOOZ,OAPP,EAOgB;AACrCY,IAAAA,KAAK,CAACC,cAAN,CAAqBI,WAArB,qBACKL,KAAK,CAACC,cAAN,CAAqBI,WAD1B,MAEKjB,OAFL;AAID,GAZsB;AAavBU,EAAAA,cAbuB,0BAaPE,KAbO,SAaiB;AAAA,QAAfM,IAAe,SAAfA,IAAe;AAAA,QAATC,KAAS,SAATA,KAAS;AAAA,QAC9BC,WAD8B,GACER,KADF,CAC9BQ,WAD8B;AAAA,QACjBP,cADiB,GACED,KADF,CACjBC,cADiB;AAEtC,QAAMQ,QAAQ,GAAGD,WAAW,CAACC,QAA7B;AACA,QAAMC,GAAG,GAAGD,QAAQ,CAACE,MAArB;;AAEA,YAAQL,IAAR;AACE,WAAK,KAAL;AACE;AADF,qBAEmBC,KAFnB;AAAA,YAEUhB,IAFV,UAEUA,IAFV;AAGE,YAAMD,EAAE,GAAGL,KAAK,CAACsB,KAAK,CAAChB,IAAP,CAAhB;AACA,YAAMqB,KAAK,GAAGtB,EAAE,CAACuB,QAAH,CAAYD,KAA1B;AACAL,QAAAA,KAAK,qBACAA,KADA;AAEHO,UAAAA,MAAM,EAAEJ,GAAG,GAAG;AAFX,UAAL;AAIA,YAAMK,OAAO,GAAG,IAAIjC,OAAJ,CAAY;AAAES,UAAAA,IAAI,EAAJA,IAAF;AAAQyB,UAAAA,YAAY,EAAEJ;AAAtB,SAAZ,CAAhB;AACAH,QAAAA,QAAQ,CAACQ,IAAT,CAAcF,OAAd;AACA;;AACF,WAAK,MAAL;AACEN,QAAAA,QAAQ,CAACQ,IAAT,CAAcjB,KAAK,CAACC,cAAN,CAAqBiB,KAArB,CAA2B;AAAEJ,UAAAA,MAAM,EAAEJ,GAAG,GAAG;AAAhB,SAA3B,CAAd;AACA;;AACF,WAAK,QAAL;AACE;AACE,cAAMS,KAAK,GAAGV,QAAQ,CAACW,SAAT,CAAmB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,KAAWrB,cAAc,CAACqB,IAA9B;AAAA,WAApB,CAAd;;AACA,cAAIH,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB;AACA;AACA;AACAnB,YAAAA,KAAK,CAACQ,WAAN,CAAkBC,QAAlB,CAA2Bc,MAA3B,CAAkCJ,KAAlC,EAAyC,CAAzC;AACD;;AACDnB,UAAAA,KAAK,CAACC,cAAN,GAAuB,IAAvB;AACD;AACD;;AACF,WAAK,UAAL;AACA,WAAK,aAAL;AACE;AACE,cAAMkB,MAAK,GAAGV,QAAQ,CAACW,SAAT,CAAmB,UAAAC,CAAC;AAAA,mBAAIA,CAAC,CAACC,IAAF,KAAWrB,cAAc,CAACqB,IAA9B;AAAA,WAApB,CAAd;;AACAb,UAAAA,QAAQ,CAACc,MAAT,CAAgBJ,MAAhB,EAAuB,CAAvB;AACA,cAAMK,WAAW,GAAGlB,IAAI,KAAK,UAAT,gCAA0BG,QAA1B,IAAoCR,cAApC,MAAuDA,cAAvD,4BAA0EQ,QAA1E,EAApB;AACAe,UAAAA,WAAW,CAACC,OAAZ,CAAoB,UAACC,GAAD,EAAMC,CAAN,EAASC,GAAT,EAAiB;AACnCF,YAAAA,GAAG,CAACrB,WAAJ,CAAgBS,MAAhB,GAAyBa,CAAC,GAAG,CAA7B;AACD,WAFD;AAGA3B,UAAAA,KAAK,CAACQ,WAAN,CAAkBC,QAAlB,GAA6Be,WAA7B;AACD;AACD;;AACF,WAAK,WAAL;AACA,WAAK,aAAL;AACE,YAAMK,SAAS,GAAGpB,QAAQ,CAACE,MAA3B;AACA,YAAMmB,SAAS,GAAG7B,cAAc,CAACI,WAAf,CAA2BS,MAA7C;AACA,YAAIgB,SAAS,KAAKD,SAAd,IAA2BC,SAAS,KAAK,CAA7C,EAAgD;AAEhD,YAAMC,IAAI,GAAGzB,IAAI,KAAK,WAAT,GAAuB,CAAvB,GAA2B,CAAC,CAAzC;AACA,YAAM0B,WAAW,GAAGvB,QAAQ,CAACwB,IAAT,CAAc,UAAAP,GAAG;AAAA,iBAAIA,GAAG,CAACrB,WAAJ,CAAgBS,MAAhB,KAA2BgB,SAAS,GAAGC,IAAI,GAAG,CAAlD;AAAA,SAAjB,CAApB;AACA/C,QAAAA,UAAU,CAACiB,cAAD,EAAiB+B,WAAjB,CAAV;AACA;;AACF;AAlDF;AAoDD,GAtEsB;AAuEvBE,EAAAA,UAvEuB,sBAuEXlC,KAvEW,SAuEa;AAAA,QAAfM,IAAe,SAAfA,IAAe;AAAA,QAATC,KAAS,SAATA,KAAS;AAEnC;AAzEsB,CAAlB","sourcesContent":["import Element from '../../components/core/models/element'\r\nimport { getEditorConfigForEditingElement, swapZindex, getVM } from '../../utils/element'\r\n\r\n// actions\r\nexport const actions = {\r\n  setEditingElement ({ commit }, payload) {\r\n    commit('setEditingElement', payload)\r\n\r\n    const vm = (payload && payload.name) ? getEditorConfigForEditingElement(payload.name) : null\r\n    commit('setEditingElementEditorConfig', vm)\r\n\r\n    window.getEditorApp.$emit('setEditingElement')\r\n  },\r\n  setElementPosition ({ commit }, payload) {\r\n    commit('setElementCommonStyle', payload)\r\n  },\r\n  setElementShape ({ commit }, payload) {\r\n    commit('setElementCommonStyle', payload)\r\n  },\r\n  recordElementRect ({ commit }, payload = {}) {\r\n    commit('recordRect', payload)\r\n  },\r\n  elementManager ({ commit }, payload) {\r\n    commit('elementManager', payload)\r\n  }\r\n}\r\n\r\n// mutations\r\nexport const mutations = {\r\n  setEditingElement (state, payload) {\r\n    state.editingElement = payload\r\n  },\r\n  setEditingElementEditorConfig (state, payload) {\r\n    state.editingElementEditorConfig = payload\r\n  },\r\n  setElementCommonStyle (state, payload) {\r\n    state.editingElement.commonStyle = {\r\n      ...state.editingElement.commonStyle,\r\n      ...payload\r\n    }\r\n  },\r\n  elementManager (state, { type, value }) {\r\n    const { editingPage, editingElement } = state\r\n    const elements = editingPage.elements\r\n    const len = elements.length\r\n\r\n    switch (type) {\r\n      case 'add':\r\n        // value.name => pluginName\r\n        const { name } = value\r\n        const vm = getVM(value.name)\r\n        const props = vm.$options.props\r\n        value = {\r\n          ...value,\r\n          zindex: len + 1\r\n        }\r\n        const element = new Element({ name, editorConfig: props })\r\n        elements.push(element)\r\n        break\r\n      case 'copy':\r\n        elements.push(state.editingElement.clone({ zindex: len + 1 }))\r\n        break\r\n      case 'delete':\r\n        {\r\n          const index = elements.findIndex(e => e.uuid === editingElement.uuid)\r\n          if (index !== -1) {\r\n            // let newElements = elements.slice()\r\n            // newElements.splice(index, 1)\r\n            // state.editingPage.elements = newElements\r\n            state.editingPage.elements.splice(index, 1)\r\n          }\r\n          state.editingElement = null\r\n        }\r\n        break\r\n      case 'move2Top':\r\n      case 'move2Bottom':\r\n        {\r\n          const index = elements.findIndex(e => e.uuid === editingElement.uuid)\r\n          elements.splice(index, 1)\r\n          const newElements = type === 'move2Top' ? [...elements, editingElement] : [editingElement, ...elements]\r\n          newElements.forEach((ele, i, arr) => {\r\n            ele.commonStyle.zindex = i + 1\r\n          })\r\n          state.editingPage.elements = newElements\r\n        }\r\n        break\r\n      case 'addZindex':\r\n      case 'minusZindex':\r\n        const maxZindex = elements.length\r\n        const eleZindex = editingElement.commonStyle.zindex\r\n        if (eleZindex === maxZindex || eleZindex === 1) return\r\n\r\n        const flag = type === 'addZindex' ? 1 : -1\r\n        const swapElement = elements.find(ele => ele.commonStyle.zindex === eleZindex + flag * 1)\r\n        swapZindex(editingElement, swapElement)\r\n        break\r\n      default:\r\n    }\r\n  },\r\n  recordRect (state, { type, value }) {\r\n\r\n  }\r\n}\r\n"]}]}