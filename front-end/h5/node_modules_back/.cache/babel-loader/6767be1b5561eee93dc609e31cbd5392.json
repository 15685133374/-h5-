{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\utils\\http.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\utils\\http.js","mtime":1575526862432},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport axios from 'axios';\nimport { message } from 'ant-design-vue';\nmessage.config({\n  maxCount: 3\n});\nexport var myMessage = message;\nexport var AxiosWrapper =\n/*#__PURE__*/\nfunction () {\n  // eslint-disable-next-line camelcase\n  function AxiosWrapper(_ref) {\n    var _ref$name = _ref.name,\n        name = _ref$name === void 0 ? 'default' : _ref$name,\n        loading_name = _ref.loading_name,\n        _ref$responseType = _ref.responseType,\n        responseType = _ref$responseType === void 0 ? 'json' : _ref$responseType,\n        headers = _ref.headers,\n        dispatch = _ref.dispatch,\n        commit = _ref.commit,\n        router = _ref.router,\n        successMsg = _ref.successMsg,\n        failMsg = _ref.failMsg,\n        successCallback = _ref.successCallback,\n        failCallback = _ref.failCallback,\n        customRequest = _ref.customRequest;\n\n    _classCallCheck(this, AxiosWrapper);\n\n    this.name = name; // eslint-disable-next-line camelcase\n\n    this.loading_name = loading_name; // eslint-disable-next-line camelcase\n\n    this.responseType = responseType;\n    this.dispatch = dispatch;\n    this.commit = commit;\n    this.router = router;\n    this.successMsg = successMsg;\n    this.failMsg = failMsg;\n    this.customRequest = customRequest;\n    this.successCallback = successCallback;\n    this.failCallback = failCallback;\n    this.source = axios.CancelToken.source();\n    this.instance = axios.create({\n      // baseURL: '/v1',\n      responseType: responseType,\n      headers: headers,\n      cancelToken: this.source.token\n    });\n    this.instance.interceptors.response.use(function (response) {\n      // Do something with response data\n      return Promise.resolve(response);\n    }, function (error) {\n      // Do something with response error\n      return Promise.reject(error);\n    });\n  }\n\n  _createClass(AxiosWrapper, [{\n    key: \"get\",\n    value: function get() {\n      var _this = this,\n          _this$instance;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this.setDefaultLoadingName(args);\n      this.setLoadingValue(true);\n\n      if (this.customRequest) {\n        return this.customRequest.apply(this, args).then(function (data) {\n          var handler = _this.getCommonResponseHandler({\n            failMsg: 'Save Failed.'\n          });\n\n          handler.call(_this, {\n            status: 200,\n            data: data\n          });\n        }).finally(function () {\n          return _this.setLoadingValue(false);\n        });\n      }\n\n      return (_this$instance = this.instance).get.apply(_this$instance, args).then(function (response) {\n        var handler = _this.getCommonResponseHandler({\n          failMsg: 'Query Failed.'\n        });\n\n        handler.call(_this, response);\n      }).catch(function (error) {\n        // handle error\n        myMessage.error(error.message);\n      }).finally(function () {\n        return _this.setLoadingValue(false);\n      });\n    }\n  }, {\n    key: \"post\",\n    value: function post() {\n      var _this$instance2,\n          _this2 = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this.setDefaultLoadingName(args);\n      this.setLoadingValue(true);\n      return (_this$instance2 = this.instance).post.apply(_this$instance2, args).then(function (response) {\n        var handler = _this2.getCommonResponseHandler({\n          failMsg: 'Save Failed.'\n        });\n\n        handler.call(_this2, response);\n        return response.data;\n      }).catch(function (error) {\n        // handle error\n        myMessage.error(error.message);\n      }).finally(function () {\n        return _this2.setLoadingValue(false);\n      });\n    }\n  }, {\n    key: \"put\",\n    value: function put() {\n      var _this3 = this,\n          _this$instance3;\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this.setDefaultLoadingName(args);\n      this.setLoadingValue(true);\n\n      if (this.customRequest) {\n        return this.customRequest.apply(this, args).then(function (data) {\n          var handler = _this3.getCommonResponseHandler({\n            failMsg: 'Save Failed.'\n          });\n\n          handler.call(_this3, {\n            status: 200,\n            data: {\n              data: data\n            }\n          });\n        }).finally(function () {\n          return _this3.setLoadingValue(false);\n        });\n      }\n\n      return (_this$instance3 = this.instance).put.apply(_this$instance3, args).then(function (response) {\n        var handler = _this3.getCommonResponseHandler({\n          failMsg: 'Save Failed.'\n        }); // handler.call(this, response)\n\n\n        handler();\n      }).catch(function (error) {\n        // handle error\n        myMessage.error(error.message);\n      }).finally(function () {\n        return _this3.setLoadingValue(false);\n      });\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      var _this$instance4,\n          _this4 = this;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      this.setDefaultLoadingName(args);\n      this.setLoadingValue(true);\n      return (_this$instance4 = this.instance).delete.apply(_this$instance4, args).then(function (response) {\n        var handler = _this4.getCommonResponseHandler({\n          failMsg: 'Save Failed.'\n        });\n\n        handler.call(_this4, response);\n      }).catch(function (error) {\n        // handle error\n        myMessage.error(error.message);\n      }).finally(function () {\n        return _this4.setLoadingValue(false);\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(reason) {\n      this.source.cancel(reason);\n    }\n  }, {\n    key: \"setLoadingValue\",\n    value: function setLoadingValue(payload) {\n      // this.dispatch('loading/update', { type: this.loading_name, payload }, { root: true })\n      this.commit('loading/update', {\n        type: this.loading_name,\n        payload: payload\n      }, {\n        root: true\n      });\n    }\n  }, {\n    key: \"setDefaultLoadingName\",\n    value: function setDefaultLoadingName() {\n      if (!this.loading_name) {\n        var url = arguments.length <= 0 ? undefined : arguments[0];\n\n        if (url.indexOf('/') !== -1) {\n          var us = url.split('/');\n          url = us[us.length - 1];\n        }\n\n        if (url.indexOf('?') !== -1) {\n          var _us = url.split('?');\n\n          url = _us[0];\n        }\n\n        this.loading_name = \"\".concat(url, \"_loading\");\n      }\n    }\n  }, {\n    key: \"getCommonResponseHandler\",\n    value: function getCommonResponseHandler() {\n      var _this5 = this;\n\n      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          failMsg = _ref2.failMsg;\n\n      return function (response) {\n        if (!response.data) {\n          myMessage.warn(_this5.failMsg || failMsg);\n        } else if (response.status === 200) {\n          _this5.successMsg && myMessage.success(_this5.successMsg);\n\n          if (_this5.successCallback) {\n            _this5.successCallback(response);\n          } else {\n            _this5.commit({\n              type: _this5.name,\n              value: response.data\n            }, {\n              root: true\n            });\n          }\n        } else if (_this5.responseType === 'json') {\n          myMessage.error(response.data.msg);\n\n          if (response.status === 401) {\n            if (_this5.router) {\n              _this5.router.push('/login');\n            }\n          } else {\n            alert(response.data.msg);\n\n            if (_this5.failCallback) {\n              _this5.failCallback(response);\n            }\n          }\n        } else {\n          if (_this5.successCallback) {\n            _this5.successCallback(response);\n          }\n        }\n      };\n    }\n  }]);\n\n  return AxiosWrapper;\n}();",null]}