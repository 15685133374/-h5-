{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-group.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\plugins\\lbp-form-group.js","mtime":1575878365434},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nimport commonProps from \"./common/props.js\";\nimport { white } from 'ansi-colors';\nexport default {\n  name: 'lbp-form-group',\n  render: function render(h) {\n    var userName = this.userName,\n        phoneNum = this.phoneNum,\n        btnName = this.btnName;\n    var style = {\n      color: this.color,\n      textAlign: this.textAlign,\n      backgroundColor: this.backgroundColor,\n      fontSize: this.fontSize + 'px',\n      lineHeight: this.lineHeight + 'em',\n      borderColor: this.borderColor,\n      borderRadius: this.borderRadius + 'px',\n      borderWidth: this.borderWidth + 'px',\n      padding: '0 5px',\n      borderBottom: '1px solid #DCDCDC',\n      width: '100%'\n    };\n    var styleBtn = {\n      color: 'white',\n      backgroundColor: '#4E90FF',\n      border: 'none',\n      outline: 'none',\n      width: '100%',\n      borderRadius: '2px',\n      marginTop: '20px',\n      padding: '4px'\n    };\n    return h(\"div\", [h(\"label\", {\n      \"attrs\": {\n        \"for\": \"name\"\n      }\n    }, [userName]), h(\"br\"), h(\"input\", {\n      \"attrs\": {\n        \"disabled\": this.disabled,\n        \"type\": this.type,\n        \"name\": this.name,\n        \"id\": \"name\",\n        \"placeholder\": this.placeholder1,\n        \"autocomplete\": \"off\",\n        \"data-type\": \"lbp-form-input\"\n      },\n      \"style\": style\n    }), h(\"br\"), h(\"label\", {\n      \"attrs\": {\n        \"for\": \"phone\"\n      }\n    }, [phoneNum]), h(\"br\"), h(\"input\", {\n      \"attrs\": {\n        \"disabled\": this.disabled,\n        \"type\": this.type,\n        \"name\": this.name,\n        \"id\": \"phone\",\n        \"placeholder\": this.placeholder2,\n        \"autocomplete\": \"off\",\n        \"data-type\": \"lbp-form-input\"\n      },\n      \"style\": style\n    }), h(\"br\"), h(\"button\", {\n      \"class\": \"submit\",\n      \"style\": styleBtn,\n      \"on\": {\n        \"click\": this.handleClick\n      }\n    }, [btnName])]);\n  },\n  props: {\n    name: {\n      type: String,\n      default: function _default() {\n        return 'name';\n      }\n    },\n    type: {\n      type: String,\n      default: 'text',\n      editor: {\n        type: 'lbs-select-input-type',\n        label: '类型'\n      }\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    // type: commonProps.type,\n    userName: commonProps.userName(),\n    phoneNum: commonProps.phoneNum(),\n    btnName: commonProps.btnName(),\n    placeholder1: commonProps.placeholder1('姓名'),\n    placeholder2: commonProps.placeholder2('电话'),\n    fontSize: commonProps.fontSize,\n    color: commonProps.color,\n    backgroundColor: commonProps.backgroundColor,\n    borderColor: commonProps.borderColor,\n    borderWidth: commonProps.borderWidth,\n    borderRadius: commonProps.borderRadius,\n    lineHeight: commonProps.lineHeight,\n    textAlign: commonProps.textAlign({\n      defaultValue: 'left'\n    })\n  },\n  methods: {\n    handleClick: function handleClick() {\n      if (this.disabled) return; // #!zh: data-type=lbp-form-input 在 lbp-form-input 组件中定义\n\n      var inputs = document.querySelectorAll(\"[data-type^='lbp-form-input']\");\n      if (!inputs.length) return;\n      var self = this;\n      var formData = new FormData();\n      inputs.forEach(function (input) {\n        return formData.append(input.dataset.uuid, input.value);\n      });\n      var req = new XMLHttpRequest();\n\n      req.onreadystatechange = function () {\n        if (req.readyState === 4) {\n          var message = req.status === 200 ? '提交成功' : '提交失败';\n          self.$message.info(message);\n        }\n      }; // #!zh: vuex.module.editor.setWork 中定义\n\n\n      var workId = window.__work.id; // TODO #!zh: 可以动态配置表单提交地址\n\n      req.open('post', \"/works/form/submit/\".concat(workId), true);\n      req.send(formData);\n    }\n  },\n  editorConfig: {\n    components: {\n      'lbs-select-input-type': {\n        props: ['value'],\n        computed: {\n          value_: {\n            get: function get() {\n              return this.value;\n            },\n            set: function set(val) {\n              this.$emit('input', val);\n            }\n          }\n        },\n        render: function render(h) {\n          var _this = this;\n\n          return h(\"a-select\", {\n            \"attrs\": {\n              \"placeholder\": \"类型\",\n              \"value\": this.value\n            },\n            \"on\": {\n              \"change\": function change(value) {\n                _this.$emit('input', value);\n\n                _this.$emit('change', value);\n              }\n            }\n          }, [this.options.map(function (option) {\n            return h(\"a-select-option\", {\n              \"key\": option.value,\n              \"attrs\": {\n                \"value\": option.value\n              }\n            }, [option.label]);\n          })]);\n        },\n        data: function data() {\n          return {\n            options: [{\n              label: '文字',\n              value: 'text'\n            }, {\n              label: '密码',\n              value: 'password'\n            }, {\n              label: '日期',\n              value: 'date'\n            }, {\n              label: '邮箱',\n              value: 'email'\n            }, {\n              label: '手机号',\n              value: 'tel'\n            }]\n          };\n        }\n      }\n    }\n  }\n}; // .lb-plugin__input {\n//   display: block;\n//   margin: 0;\n//   padding: 0 5px;\n//   box-sizing: border-box;\n//   overflow: visible;\n//   border: 1px solid #ced4da;\n//   &:focus {\n//     outline: none;\n//   }\n// }",{"version":3,"sources":["d:/project/luban/luban-h5/front-end/h5/src/components/plugins/lbp-form-group.js"],"names":["commonProps","white","name","render","h","userName","phoneNum","btnName","style","color","textAlign","backgroundColor","fontSize","lineHeight","borderColor","borderRadius","borderWidth","padding","borderBottom","width","styleBtn","border","outline","marginTop","disabled","type","placeholder1","placeholder2","handleClick","props","String","default","editor","label","Boolean","defaultValue","methods","inputs","document","querySelectorAll","length","self","formData","FormData","forEach","input","append","dataset","uuid","value","req","XMLHttpRequest","onreadystatechange","readyState","message","status","$message","info","workId","window","__work","id","open","send","editorConfig","components","computed","value_","get","set","val","$emit","options","map","option","data"],"mappings":"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","sourcesContent":["import commonProps from './common/props.js'\r\nimport { white } from 'ansi-colors'\r\n\r\nexport default {\r\n  name: 'lbp-form-group',\r\n  render (h) {\r\n    const {\r\n      userName,\r\n      phoneNum,\r\n      btnName\r\n    } = this\r\n    const style = {\r\n      color: this.color,\r\n      textAlign: this.textAlign,\r\n      backgroundColor: this.backgroundColor,\r\n      fontSize: this.fontSize + 'px',\r\n      lineHeight: this.lineHeight + 'em',\r\n      borderColor: this.borderColor,\r\n      borderRadius: this.borderRadius + 'px',\r\n      borderWidth: this.borderWidth + 'px',\r\n      padding: '0 5px',\r\n      borderBottom: '1px solid #DCDCDC',\r\n      width: '100%'\r\n    }\r\n    const styleBtn = {\r\n      color: 'white',\r\n      backgroundColor: '#4E90FF',\r\n      border: 'none',\r\n      outline: 'none',\r\n      width: '100%',\r\n      borderRadius: '2px',\r\n      marginTop: '20px',\r\n      padding: '4px'\r\n    }\r\n    return (\r\n      <div><label for=\"name\">{userName}</label><br></br>\r\n      <input disabled={this.disabled} type={this.type}\r\n        style={style}\r\n        name={this.name}\r\n        id=\"name\"\r\n        placeholder={this.placeholder1}\r\n        autocomplete=\"off\"\r\n        data-type=\"lbp-form-input\" // 点击[表单提交]按钮的时候,找到data-type为:lbp-form-input 的输入框，并将其值添加到formData,提交到后台\r\n      /><br></br><label for=\"phone\">{phoneNum}</label><br></br>\r\n      <input disabled={this.disabled} type={this.type}\r\n        style={style}\r\n        name={this.name}\r\n        id=\"phone\"\r\n        placeholder={this.placeholder2}\r\n        autocomplete=\"off\"\r\n        data-type=\"lbp-form-input\" // 点击[表单提交]按钮的时候,找到data-type为:lbp-form-input 的输入框，并将其值添加到formData,提交到后台\r\n    /><br></br><button class=\"submit\" style={styleBtn}  onClick={this.handleClick}>{btnName}</button>\r\n      </div>\r\n    )\r\n  },\r\n  props: {\r\n    name: {\r\n      type: String,\r\n      default () {\r\n        return 'name'\r\n      }\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'text',\r\n      editor: {\r\n        type: 'lbs-select-input-type',\r\n        label: '类型'\r\n      }\r\n    },\r\n    disabled: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // type: commonProps.type,\r\n    userName: commonProps.userName(),\r\n    phoneNum: commonProps.phoneNum(),\r\n    btnName: commonProps.btnName(),\r\n    placeholder1: commonProps.placeholder1('姓名'),\r\n    placeholder2: commonProps.placeholder2('电话'),\r\n    fontSize: commonProps.fontSize,\r\n    color: commonProps.color,\r\n    backgroundColor: commonProps.backgroundColor,\r\n    borderColor: commonProps.borderColor,\r\n    borderWidth: commonProps.borderWidth,\r\n    borderRadius: commonProps.borderRadius,\r\n    lineHeight: commonProps.lineHeight,\r\n    textAlign: commonProps.textAlign({ defaultValue: 'left' })\r\n  },\r\n  methods: {\r\n    handleClick () {\r\n      if (this.disabled) return\r\n\r\n      // #!zh: data-type=lbp-form-input 在 lbp-form-input 组件中定义\r\n      let inputs = document.querySelectorAll(\"[data-type^='lbp-form-input']\")\r\n      if (!inputs.length) return\r\n      const self = this\r\n      let formData = new FormData()\r\n      inputs.forEach(input => formData.append(input.dataset.uuid, input.value))\r\n      const req = new XMLHttpRequest()\r\n      req.onreadystatechange = function () {\r\n        if (req.readyState === 4) {\r\n          const message = req.status === 200 ? '提交成功' : '提交失败'\r\n          self.$message.info(message)\r\n        }\r\n      }\r\n\r\n      // #!zh: vuex.module.editor.setWork 中定义\r\n      const workId = window.__work.id\r\n      // TODO #!zh: 可以动态配置表单提交地址\r\n      req.open('post', `/works/form/submit/${workId}`, true)\r\n      req.send(formData)\r\n    }\r\n  },\r\n  editorConfig: {\r\n    components: {\r\n      'lbs-select-input-type': {\r\n        props: ['value'],\r\n        computed: {\r\n          value_: {\r\n            get () {\r\n              return this.value\r\n            },\r\n            set (val) {\r\n              this.$emit('input', val)\r\n            }\r\n          }\r\n        },\r\n        render (h) {\r\n          return (\r\n            <a-select\r\n              placeholder=\"类型\"\r\n              value={this.value}\r\n              onChange={(value) => {\r\n                this.$emit('input', value)\r\n                this.$emit('change', value)\r\n              }}\r\n            >\r\n              {\r\n                this.options.map(option => (\r\n                  <a-select-option\r\n                    key={option.value}\r\n                    value={option.value}\r\n                  >{option.label}</a-select-option>\r\n                ))\r\n              }\r\n            </a-select>\r\n          )\r\n        },\r\n        data: () => ({\r\n          options: [\r\n            {\r\n              label: '文字',\r\n              value: 'text'\r\n            },\r\n            {\r\n              label: '密码',\r\n              value: 'password'\r\n            },\r\n            {\r\n              label: '日期',\r\n              value: 'date'\r\n            },\r\n            {\r\n              label: '邮箱',\r\n              value: 'email'\r\n            },\r\n            {\r\n              label: '手机号',\r\n              value: 'tel'\r\n            }\r\n          ]\r\n        })\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// .lb-plugin__input {\r\n//   display: block;\r\n//   margin: 0;\r\n//   padding: 0 5px;\r\n//   box-sizing: border-box;\r\n//   overflow: visible;\r\n//   border: 1px solid #ced4da;\r\n//   &:focus {\r\n//     outline: none;\r\n//   }\r\n// }\r\n"]}]}