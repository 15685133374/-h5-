{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\canvas\\edit.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\canvas\\edit.js","mtime":1575526862122},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.function.name\";\nimport _toConsumableArray from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { mapState, mapActions } from 'vuex';\nimport Shape from \"../../support/shape\";\nimport ContextMenu from \"../../support/contexmenu\";\nexport default {\n  props: ['elements', 'handleClickElementProp', 'handleClickCanvasProp'],\n  data: function data() {\n    return {\n      vLines: [],\n      hLines: [],\n      contextmenuPos: []\n    };\n  },\n  computed: _objectSpread({}, mapState('editor', ['editingElement'])),\n  methods: _objectSpread({}, mapActions('editor', ['setEditingElement', 'setElementPosition', 'setElementShape', 'recordElementRect', 'elementManager']), {\n    // TODO #!zh: 优化代码\n    // generate vertical line\n    drawVLine: function drawVLine(newLeft) {\n      // this.editingElement.commonStyle.left = newLeft\n      this.setElementPosition({\n        left: newLeft\n      });\n      this.vLines = [{\n        left: newLeft\n      }];\n    },\n    // generate horizontal line\n    drawHLine: function drawHLine(newTop) {\n      // this.editingElement.commonStyle.top = newTop\n      this.setElementPosition({\n        top: newTop\n      });\n      this.hLines = [{\n        top: newTop\n      }];\n    },\n    calcX: function calcX(newLeft) {\n      var _this = this;\n\n      var uuid = this.editingElement.uuid;\n      var xCoords = [];\n      this.elements.filter(function (e) {\n        return e.uuid !== uuid;\n      }).forEach(function (e) {\n        var width = e.commonStyle.width;\n        var left = e.commonStyle.left;\n        xCoords = [].concat(_toConsumableArray(xCoords), [left, left + width / 2, left + width]);\n      });\n      xCoords.some(function (x) {\n        if (Math.abs(newLeft - x) <= 5) {\n          _this.drawVLine(x);\n\n          return true;\n        } else {\n          _this.vLines = [];\n        }\n      });\n    },\n    calcY: function calcY(newTop) {\n      var _this2 = this;\n\n      var uuid = this.editingElement.uuid;\n      var yCoords = [];\n      this.elements.filter(function (e) {\n        return e.uuid !== uuid;\n      }).forEach(function (e) {\n        var height = e.commonStyle.height;\n        var top = e.commonStyle.top;\n        yCoords = [].concat(_toConsumableArray(yCoords), [top, top + height / 2, top + height]);\n      });\n      yCoords.some(function (y) {\n        if (Math.abs(newTop - y) <= 5) {\n          _this2.drawHLine(y);\n\n          return true;\n        } else {\n          _this2.hLines = [];\n        }\n      });\n    },\n\n    /**\r\n     * #!zh: 在元素移动过程中，计算和生成辅助线\r\n     */\n    handleElementMove: function handleElementMove(pos) {\n      this.setElementPosition(pos);\n      this.calcX(pos.left);\n      this.calcY(pos.top);\n    },\n    handlePointMove: function handlePointMove(_ref) {\n      var top = _ref.top,\n          left = _ref.left;\n      this.calcX(left);\n      this.calcY(top);\n    },\n    bindContextMenu: function bindContextMenu(e) {\n      // 优化右击菜单的显示，去除冗余的无效逻辑\n      var _this$$el$getBounding = this.$el.getBoundingClientRect(),\n          x = _this$$el$getBounding.x,\n          y = _this$$el$getBounding.y;\n\n      this.contextmenuPos = [e.clientX - x, e.clientY - y]; // console.log(e.target)\n      // console.log(e.target.classList)\n      // // e.preventDefault() // 不显示默认的右击菜单\n      // if (\n      //   e.target.classList.contains('element-on-edit-canvas') ||\n      //   e.target.parentElement.classList.contains('element-on-edit-canvas')\n      // ) {\n      //   const { x, y } = this.$el.getBoundingClientRect()\n      //   console.log(x, y)\n      //   this.contextmenuPos = [e.clientX - x, e.clientY - y]\n      // } else {\n      //   this.hideContextMenu()\n      // }\n    },\n    hideContextMenu: function hideContextMenu() {\n      this.contextmenuPos = [];\n    },\n    handleClickCanvas: function handleClickCanvas(e) {\n      if (!e.target.classList.contains('element-on-edit-canvas')) {\n        this.setEditingElement();\n      }\n    },\n\n    /**\r\n     * #!zh: renderCanvas 渲染中间画布\r\n     * elements\r\n     * @param {*} h\r\n     * @param {*} elements\r\n     * @returns\r\n     */\n    renderCanvas: function renderCanvas(h, elements) {\n      var _this3 = this;\n\n      return h(\"div\", {\n        \"style\": {\n          height: '100%',\n          position: 'relative'\n        },\n        \"on\": {\n          \"click\": function click(e) {\n            _this3.hideContextMenu();\n\n            _this3.handleClickCanvas(e);\n          },\n          \"contextmenu\": function contextmenu(e) {\n            e.preventDefault();\n            e.stopPropagation(); // this.bindContextMenu(e)\n          }\n        }\n      }, [elements.map(function (element, index) {\n        if (element.name === 'lbp-background') {\n          return h('lbp-background', {\n            props: element.getProps()\n          });\n        }\n\n        var data = {\n          style: {\n            width: '100%',\n            height: '100%'\n          },\n          // 添加 class 的原因：与 handleClickCanvasProp 配合,\n          // 当点击编辑画布上的其它区域（clickEvent.target.classList 不包含下面的 className）的时候，设置 editingElement=null\n          class: 'element-on-edit-canvas',\n          props: _objectSpread({}, element.getProps(), {\n            // #6 #3,\n            editorMode: 'edit'\n          }),\n          // nativeOn: {\n          //   contextmenu: e => {\n          //     this.bindContextMenu(e)\n          //   }\n          // },\n          on: {\n            // 高亮当前点击的元素\n            // click: () => this.setEditingElement(element)\n            input: function input(_ref2) {\n              var value = _ref2.value,\n                  pluginName = _ref2.pluginName;\n\n              if (pluginName === 'lbp-text') {\n                element.pluginProps.text = value;\n              }\n            }\n          }\n        };\n        return h(Shape, {\n          \"style\": element.getStyle({\n            position: 'absolute'\n          }),\n          \"attrs\": {\n            \"defaultPosition\": element.commonStyle,\n            \"element\": element,\n            \"active\": _this3.editingElement === element,\n            \"handleMousedownProp\": function handleMousedownProp() {\n              // 在 shape 上面添加 mousedown，而非 plugin 本身添加 onClick 的原因：\n              // 在 mousedown 的时候，即可激活 editingElement(当前选中元素)\n              // 这样，就不用等到鼠标抬起的时候，也就是 plugin 的 onClick 生效的时候，才给选中的元素添加边框等选中效果\n              _this3.setEditingElement(element);\n            },\n            \"handlePointMoveProp\": function handlePointMoveProp(pos) {\n              _this3.setElementPosition(pos);\n            },\n            \"handleElementMoveProp\": _this3.handleElementMove,\n            \"handleElementMouseUpProp\": function handleElementMouseUpProp() {\n              _this3.recordElementRect();\n            },\n            \"handlePointMouseUpProp\": function handlePointMouseUpProp() {\n              _this3.recordElementRect();\n            }\n          },\n          \"nativeOn\": {\n            \"contextmenu\": function contextmenu(e) {\n              _this3.bindContextMenu(e);\n            }\n          }\n        }, [h(element.name, data)]);\n      }), this.vLines.map(function (line) {\n        return h(\"div\", {\n          \"class\": \"v-line\",\n          \"style\": {\n            left: \"\".concat(line.left, \"px\")\n          }\n        });\n      }), this.hLines.map(function (line) {\n        return h(\"div\", {\n          \"class\": \"h-line\",\n          \"style\": {\n            top: \"\".concat(line.top, \"px\")\n          }\n        });\n      }), this.contextmenuPos.length && h(ContextMenu, {\n        \"attrs\": {\n          \"position\": this.contextmenuPos\n        },\n        \"on\": {\n          \"select\": function select(_ref3) {\n            var item = _ref3.item,\n                key = _ref3.key,\n                selectedKeys = _ref3.selectedKeys;\n\n            _this3.elementManager({\n              type: key\n            });\n\n            _this3.hideContextMenu();\n          },\n          \"hideMenu\": this.hideContextMenu\n        }\n      })]);\n    }\n  }),\n  render: function render(h) {\n    return this.renderCanvas(h, this.elements);\n  }\n};",null]}