{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\page.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\page.js","mtime":1575526862402},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport Page from \"../../components/core/models/page\"; // actions\n\nexport var actions = {\n  setEditingPage: function setEditingPage(_ref) {\n    var commit = _ref.commit;\n    var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    commit('setEditingPage', pageIndex);\n  },\n  pageManager: function pageManager(_ref2, payload) {\n    var commit = _ref2.commit;\n    commit('pageManager', payload);\n  }\n}; // mutations\n\nexport var mutations = {\n  setEditingPage: function setEditingPage(state) {\n    var pageIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    state.editingPage = state.work.pages[pageIndex];\n  },\n  pageManager: function pageManager(state, _ref3) {\n    var type = _ref3.type,\n        value = _ref3.value;\n\n    switch (type) {\n      case 'editTitle':\n        var pageIndexForEditingTitle = value.pageIndexForEditingTitle,\n            newTitle = value.newTitle;\n        state.work.pages[pageIndexForEditingTitle].title = newTitle;\n        break;\n\n      case 'add':\n        var page = new Page(value);\n        state.work.pages.push(page);\n        break;\n\n      case 'copy':\n        state.work.pages.push(state.editingPage.clone());\n        break;\n\n      case 'delete':\n        if (state.work.pages.length === 1) return; // #!zh: 作品中至少需要保留一个页面，TODO 需要在页面中提示用户此信息\n\n        var work = state.work,\n            editingPage = state.editingPage;\n        var index = work.pages.findIndex(function (page) {\n          return page.uuid === editingPage.uuid;\n        });\n\n        if (index !== -1) {\n          var newPages = work.pages.slice();\n          newPages.splice(index, 1);\n          state.work.pages = newPages;\n        }\n\n        break;\n\n      default:\n    }\n  }\n};",null]}