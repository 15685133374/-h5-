{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\mixins\\animation.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\mixins\\animation.js","mtime":1575526862372},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n// https://stackoverflow.com/questions/26874769/getcomputedstyle-and-csstext-in-ie-and-firefox\nfunction getComputedCSSText(style) {\n  var cssText = '';\n\n  for (var attr in style) {\n    // m <?> matched\n    // #!en: hump to line\n    // #!zh: 驼峰转下划线\n    cssText += \"\".concat(attr.replace(/[A-Z]+/g, function (m) {\n      return \"-\".concat(m.toLowerCase());\n    }), \":\").concat(style[attr], \";\");\n  }\n\n  return cssText;\n}\n\nexport default {\n  methods: {\n    runAnimations: function () {\n      var _runAnimations = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var animationQueue, len, that, parentNode, animIdx, oldStyle, runAnimation;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runAnimation = function _ref() {\n                  if (animIdx < len) {\n                    var animation = animationQueue[animIdx];\n                    var animationStyle = {\n                      animationName: animation.type,\n                      animationDuration: \"\".concat(animation.duration, \"s\"),\n                      animationIterationCount: animation.infinite ? 'infinite' : animation.interationCount,\n                      animationDelay: \"\".concat(animation.delay, \"s\"),\n                      animationFillMode: 'both'\n                    };\n                    parentNode.style.cssText = getComputedCSSText(animationStyle) + getComputedCSSText(oldStyle);\n                    animIdx++;\n                  } else {\n                    // reset to the initial state after the animation ended\n                    parentNode.style.cssText = getComputedCSSText(oldStyle);\n                  }\n                };\n\n                animationQueue = this.animations || this.element.animations || [];\n                len = animationQueue.length;\n\n                if (!(len === 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                that = this;\n                parentNode = this.$el;\n                animIdx = 0;\n                oldStyle = that.element.getStyle({\n                  position: 'absolute'\n                });\n                runAnimation();\n                parentNode.addEventListener('animationend', runAnimation, false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function runAnimations() {\n        return _runAnimations.apply(this, arguments);\n      }\n\n      return runAnimations;\n    }()\n  },\n  created: function created() {\n    var that = this;\n    window.getEditorApp && window.getEditorApp.$on('RUN_ANIMATIONS', function () {\n      that.runAnimations(); // if (that.active) {\n      //   that.runAnimations()\n      // }\n    });\n  }\n};",{"version":3,"sources":["D:/project/luban/luban-h5/front-end/h5/src/mixins/animation.js"],"names":["getComputedCSSText","style","cssText","attr","replace","m","toLowerCase","methods","runAnimations","runAnimation","animIdx","len","animation","animationQueue","animationStyle","animationName","type","animationDuration","duration","animationIterationCount","infinite","interationCount","animationDelay","delay","animationFillMode","parentNode","oldStyle","animations","element","length","that","$el","getStyle","position","addEventListener","created","window","getEditorApp","$on"],"mappings":";;;;AAAA;AACA,SAASA,kBAAT,CAA6BC,KAA7B,EAAoC;AAClC,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtB;AACA;AACA;AACAC,IAAAA,OAAO,cAAOC,IAAI,CAACC,OAAL,CAAa,SAAb,EAAwB,UAAAC,CAAC;AAAA,wBAAQA,CAAC,CAACC,WAAF,EAAR;AAAA,KAAzB,CAAP,cAA8DL,KAAK,CAACE,IAAD,CAAnE,MAAP;AACD;;AACD,SAAOD,OAAP;AACD;;AAED,eAAe;AACbK,EAAAA,OAAO,EAAE;AACDC,IAAAA,aADC;AAAA;AAAA;AAAA;AAAA,sEAYIC,YAZJ;AAAA;AAAA;AAAA;AAAA;AAYIA,gBAAAA,YAZJ,mBAYoB;AACvB,sBAAIC,OAAO,GAAGC,GAAd,EAAmB;AACjB,wBAAMC,SAAS,GAAGC,cAAc,CAACH,OAAD,CAAhC;AACA,wBAAII,cAAc,GAAG;AACnBC,sBAAAA,aAAa,EAAEH,SAAS,CAACI,IADN;AAEnBC,sBAAAA,iBAAiB,YAAKL,SAAS,CAACM,QAAf,MAFE;AAGnBC,sBAAAA,uBAAuB,EAAEP,SAAS,CAACQ,QAAV,GAAqB,UAArB,GAAkCR,SAAS,CAACS,eAHlD;AAInBC,sBAAAA,cAAc,YAAKV,SAAS,CAACW,KAAf,MAJK;AAKnBC,sBAAAA,iBAAiB,EAAE;AALA,qBAArB;AAOAC,oBAAAA,UAAU,CAACxB,KAAX,CAAiBC,OAAjB,GAA2BF,kBAAkB,CAACc,cAAD,CAAlB,GAAqCd,kBAAkB,CAAC0B,QAAD,CAAlF;AACAhB,oBAAAA,OAAO;AACR,mBAXD,MAWO;AACL;AACAe,oBAAAA,UAAU,CAACxB,KAAX,CAAiBC,OAAjB,GAA2BF,kBAAkB,CAAC0B,QAAD,CAA7C;AACD;AACF,iBA5BI;;AAECb,gBAAAA,cAFD,GAEkB,KAAKc,UAAL,IAAmB,KAAKC,OAAL,CAAaD,UAAhC,IAA8C,EAFhE;AAGDhB,gBAAAA,GAHC,GAGKE,cAAc,CAACgB,MAHpB;;AAAA,sBAIDlB,GAAG,KAAK,CAJP;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAMDmB,gBAAAA,IANC,GAMM,IANN;AAODL,gBAAAA,UAPC,GAOY,KAAKM,GAPjB;AAQDrB,gBAAAA,OARC,GAQS,CART;AASCgB,gBAAAA,QATD,GASYI,IAAI,CAACF,OAAL,CAAaI,QAAb,CAAsB;AAAEC,kBAAAA,QAAQ,EAAE;AAAZ,iBAAtB,CATZ;AAULxB,gBAAAA,YAAY;AAmBZgB,gBAAAA,UAAU,CAACS,gBAAX,CAA4B,cAA5B,EAA4CzB,YAA5C,EAA0D,KAA1D;;AA7BK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,GADI;AAiCb0B,EAAAA,OAjCa,qBAiCF;AACT,QAAML,IAAI,GAAG,IAAb;AACAM,IAAAA,MAAM,CAACC,YAAP,IAAuBD,MAAM,CAACC,YAAP,CAAoBC,GAApB,CAAwB,gBAAxB,EAA0C,YAAM;AACrER,MAAAA,IAAI,CAACtB,aAAL,GADqE,CAErE;AACA;AACA;AACD,KALsB,CAAvB;AAMD;AAzCY,CAAf","sourcesContent":["// https://stackoverflow.com/questions/26874769/getcomputedstyle-and-csstext-in-ie-and-firefox\r\nfunction getComputedCSSText (style) {\r\n  let cssText = ''\r\n  for (let attr in style) {\r\n    // m <?> matched\r\n    // #!en: hump to line\r\n    // #!zh: 驼峰转下划线\r\n    cssText += `${attr.replace(/[A-Z]+/g, m => `-${m.toLowerCase()}`)}:${style[attr]};`\r\n  }\r\n  return cssText\r\n}\r\n\r\nexport default {\r\n  methods: {\r\n    async runAnimations () {\r\n      const animationQueue = this.animations || this.element.animations || []\r\n      let len = animationQueue.length\r\n      if (len === 0) return\r\n\r\n      let that = this\r\n      let parentNode = this.$el\r\n      let animIdx = 0\r\n      const oldStyle = that.element.getStyle({ position: 'absolute' })\r\n      runAnimation()\r\n\r\n      function runAnimation () {\r\n        if (animIdx < len) {\r\n          const animation = animationQueue[animIdx]\r\n          let animationStyle = {\r\n            animationName: animation.type,\r\n            animationDuration: `${animation.duration}s`,\r\n            animationIterationCount: animation.infinite ? 'infinite' : animation.interationCount,\r\n            animationDelay: `${animation.delay}s`,\r\n            animationFillMode: 'both'\r\n          }\r\n          parentNode.style.cssText = getComputedCSSText(animationStyle) + getComputedCSSText(oldStyle)\r\n          animIdx++\r\n        } else {\r\n          // reset to the initial state after the animation ended\r\n          parentNode.style.cssText = getComputedCSSText(oldStyle)\r\n        }\r\n      }\r\n      parentNode.addEventListener('animationend', runAnimation, false)\r\n    }\r\n  },\r\n  created () {\r\n    const that = this\r\n    window.getEditorApp && window.getEditorApp.$on('RUN_ANIMATIONS', () => {\r\n      that.runAnimations()\r\n      // if (that.active) {\r\n      //   that.runAnimations()\r\n      // }\r\n    })\r\n  }\r\n\r\n}\r\n"]}]}