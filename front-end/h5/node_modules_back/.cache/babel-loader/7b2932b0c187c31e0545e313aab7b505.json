{"remainingRequest":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\edit-panel\\props.js","dependencies":[{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\src\\components\\core\\editor\\edit-panel\\props.js","mtime":1575526862172},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"d:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _mergeJSXProps from \"@vue/babel-helper-vue-jsx-merge-props\";\nimport _slicedToArray from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.entries\";\nimport \"core-js/modules/es6.function.name\";\nimport _defineProperty from \"d:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Vue from 'vue';\nimport { mapState, mapActions } from 'vuex';\nimport { getVM } from \"../../../../utils/element\";\nexport default {\n  data: function data() {\n    return {\n      loadCustomEditorFlag: false\n    };\n  },\n  props: {\n    layout: {\n      type: String,\n      default: 'horizontal'\n    }\n  },\n  computed: _objectSpread({}, mapState('editor', ['editingElement', 'editingElementEditorConfig']), {\n    customEditorName: function customEditorName() {\n      return \"\".concat(this.editingElement.name, \"-custom-editor\");\n    }\n  }),\n  methods: _objectSpread({}, mapActions('editor', ['setEditingElement']), {\n    loadCustomEditorForPlugin: function loadCustomEditorForPlugin() {\n      var _this = this;\n\n      this.loadCustomEditorFlag = false;\n      if (!this.editingElement) return;\n\n      if (Vue.component(this.customEditorName)) {\n        this.loadCustomEditorFlag = true;\n      } else {\n        import(\"../../../plugins/\".concat(this.editingElement.name, \"__editor\")).then(function (component) {\n          _this.loadCustomEditorFlag = true;\n          Vue.component(_this.customEditorName, component.default);\n        }).catch(function (err) {\n          console.log(err);\n          console.warn('没有发现组件对应的编辑器');\n        });\n      }\n    },\n\n    /**\r\n     * 将插件属性的 自定义增强编辑器注入 属性编辑面板中\r\n     */\n    mixinEnhancedPropsEditor: function mixinEnhancedPropsEditor(editingElement) {\n      if (!this.editingElementEditorConfig || !this.editingElementEditorConfig.components) return;\n      var components = this.editingElementEditorConfig.components;\n\n      for (var key in components) {\n        if (this.$options.components[key]) return;\n        this.$options.components[key] = components[key];\n      }\n    },\n    renderPropsEditorPanel: function renderPropsEditorPanel(h, editingElement) {\n      var _this2 = this;\n\n      var vm = getVM(editingElement.name);\n      var props = vm.$options.props;\n      return h(\"a-form\", {\n        \"ref\": \"form\",\n        \"attrs\": {\n          \"size\": \"mini\",\n          \"id\": \"props-edit-form\",\n          \"layout\": this.layout\n        }\n      }, [// plugin-custom-editor\n      this.loadCustomEditorFlag && h(this.customEditorName, {\n        props: {\n          elementProps: editingElement.pluginProps\n        }\n      }), Object.entries(props).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            propKey = _ref2[0],\n            obj = _ref2[1];\n\n        return obj.editor && !obj.editor.custom;\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            propKey = _ref4[0],\n            obj = _ref4[1];\n\n        var item = obj.editor; // https://vuejs.org/v2/guide/render-function.html\n\n        var data = {\n          style: {\n            width: '100%'\n          },\n          props: _objectSpread({}, item.prop || {}, {\n            // https://vuejs.org/v2/guide/render-function.html#v-model\n            // #!zh:不设置默认值的原因（下一行的代码，注释的代码）：\n            // 比如表单 input，如果用户手动删除了 placeholder的内容，程序会用defaultPropValue填充，\n            // 表现在UI上就是：用户永远无法彻底删掉默认值（必须保留至少一个字符）\n            // value: editingElement.pluginProps[propKey] || item.defaultPropValue\n            value: editingElement.pluginProps[propKey]\n          }),\n          on: {\n            // https://vuejs.org/v2/guide/render-function.html#v-model\n            // input (e) {\n            //   editingElement.pluginProps[propKey] = e.target ? e.target.value : e\n            // }\n            change: function change(e) {\n              // TODO fixme: update plugin props in vuex with dispatch\n              editingElement.pluginProps[propKey] = e.target ? e.target.value : e;\n            }\n          }\n        };\n        var formItemLayout = _this2.layout === 'horizontal' ? {\n          labelCol: {\n            span: 6\n          },\n          wrapperCol: {\n            span: 16,\n            offset: 2\n          }\n        } : {};\n        var formItemData = {\n          props: _objectSpread({}, formItemLayout, {\n            label: item.label\n          })\n        };\n        return h(\"a-form-item\", _mergeJSXProps([{}, formItemData]), [item.extra && h(\"div\", {\n          \"slot\": \"extra\"\n        }, [typeof item.extra === 'function' ? item.extra(h) : item.extra]), h(item.type, data)]);\n      })]);\n    }\n  }),\n  render: function render(h) {\n    var ele = this.editingElement;\n    if (!ele) return h(\"span\", [this.$t('editor.editPanel.common.empty')]);\n    this.mixinEnhancedPropsEditor(ele);\n    return this.renderPropsEditorPanel(h, ele);\n  },\n  created: function created() {\n    window.getEditorApp.$on('setEditingElement', this.loadCustomEditorForPlugin);\n  }\n};",null]}