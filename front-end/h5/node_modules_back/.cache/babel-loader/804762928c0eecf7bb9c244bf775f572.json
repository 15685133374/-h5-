{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\mixins\\animation.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\mixins\\animation.js","mtime":1575526862372},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n// https://stackoverflow.com/questions/26874769/getcomputedstyle-and-csstext-in-ie-and-firefox\nfunction getComputedCSSText(style) {\n  var cssText = '';\n\n  for (var attr in style) {\n    // m <?> matched\n    // #!en: hump to line\n    // #!zh: 驼峰转下划线\n    cssText += \"\".concat(attr.replace(/[A-Z]+/g, function (m) {\n      return \"-\".concat(m.toLowerCase());\n    }), \":\").concat(style[attr], \";\");\n  }\n\n  return cssText;\n}\n\nexport default {\n  methods: {\n    runAnimations: function () {\n      var _runAnimations = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var animationQueue, len, that, parentNode, animIdx, oldStyle, runAnimation;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                runAnimation = function _ref() {\n                  if (animIdx < len) {\n                    var animation = animationQueue[animIdx];\n                    var animationStyle = {\n                      animationName: animation.type,\n                      animationDuration: \"\".concat(animation.duration, \"s\"),\n                      animationIterationCount: animation.infinite ? 'infinite' : animation.interationCount,\n                      animationDelay: \"\".concat(animation.delay, \"s\"),\n                      animationFillMode: 'both'\n                    };\n                    parentNode.style.cssText = getComputedCSSText(animationStyle) + getComputedCSSText(oldStyle);\n                    animIdx++;\n                  } else {\n                    // reset to the initial state after the animation ended\n                    parentNode.style.cssText = getComputedCSSText(oldStyle);\n                  }\n                };\n\n                animationQueue = this.animations || this.element.animations || [];\n                len = animationQueue.length;\n\n                if (!(len === 0)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                that = this;\n                parentNode = this.$el;\n                animIdx = 0;\n                oldStyle = that.element.getStyle({\n                  position: 'absolute'\n                });\n                runAnimation();\n                parentNode.addEventListener('animationend', runAnimation, false);\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function runAnimations() {\n        return _runAnimations.apply(this, arguments);\n      }\n\n      return runAnimations;\n    }()\n  },\n  created: function created() {\n    var that = this;\n    window.getEditorApp && window.getEditorApp.$on('RUN_ANIMATIONS', function () {\n      that.runAnimations(); // if (that.active) {\n      //   that.runAnimations()\n      // }\n    });\n  }\n};",null]}