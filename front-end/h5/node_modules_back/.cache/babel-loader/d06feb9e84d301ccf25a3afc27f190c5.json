{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\utils\\canvas-helper.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\utils\\canvas-helper.js","mtime":1575526862422},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.regexp.split\";\nimport html2canvas from 'html2canvas'; // https://stackoverflow.com/questions/12168909/blob-from-dataurl\n\nfunction dataURItoBlob(dataURI) {\n  // convert base64 to raw binary data held in a string\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\n  var byteString = atob(dataURI.split(',')[1]); // separate out the mime component\n\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]; // write the bytes of the string to an ArrayBuffer\n\n  var ab = new ArrayBuffer(byteString.length); // create a view into the buffer\n\n  var ia = new Uint8Array(ab); // set the bytes of the buffer to the correct values\n\n  for (var i = 0; i < byteString.length; i++) {\n    ia[i] = byteString.charCodeAt(i);\n  } // write the ArrayBuffer to a blob, and you're done\n\n\n  var blob = new Blob([ab], {\n    type: mimeString\n  });\n  return blob;\n}\n/**\r\n * 生成作品封面图(截图)\r\n * @param {String} selector\r\n * @param {文件名} fileName\r\n */\n\n\nexport function takeScreenshot() {\n  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '.canvas-wrapper';\n  var fileName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\".concat(+new Date());\n  var el = document.querySelector(selector);\n  return new Promise(function (resolve, reject) {\n    // html2canvas document: https://html2canvas.hertzen.com/configuration\n    // allowTaint: Whether to allow cross-origin images to taint the canvas\n    // if you use allowTaint: true, the cors image will taint the canvas, and canvas.toDataURL won't work\n    // 会对canvas造成污染，导致 canvas.toDataURL 无效\n    html2canvas(el, {\n      proxy: '/works/cors-proxy'\n    }).then(function (canvas) {\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\n      var dataUrl = canvas.toDataURL('image/jpeg', 0.6);\n      var blob = dataURItoBlob(dataUrl);\n      var file = new window.File([blob], fileName, {\n        type: 'image/png'\n      });\n      resolve(file); // canvas.toBlob(blob => {\n      //   const file = new window.File([blob], fileName, { type: 'image/png' })\n      //   resolve(file)\n      // })\n    });\n  });\n}",{"version":3,"sources":["D:/project/luban/luban-h5/front-end/h5/src/utils/canvas-helper.js"],"names":["html2canvas","dataURItoBlob","dataURI","byteString","atob","split","mimeString","ab","ArrayBuffer","length","ia","Uint8Array","i","charCodeAt","blob","Blob","type","takeScreenshot","selector","fileName","Date","el","document","querySelector","Promise","resolve","reject","proxy","then","canvas","dataUrl","toDataURL","file","window","File"],"mappings":";;AAAA,OAAOA,WAAP,MAAwB,aAAxB,C,CAEA;;AACA,SAASC,aAAT,CAAwBC,OAAxB,EAAiC;AAC/B;AACA;AACA,MAAIC,UAAU,GAAGC,IAAI,CAACF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAArB,CAH+B,CAK/B;;AACA,MAAIC,UAAU,GAAGJ,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAjB,CAN+B,CAQ/B;;AACA,MAAIE,EAAE,GAAG,IAAIC,WAAJ,CAAgBL,UAAU,CAACM,MAA3B,CAAT,CAT+B,CAW/B;;AACA,MAAIC,EAAE,GAAG,IAAIC,UAAJ,CAAeJ,EAAf,CAAT,CAZ+B,CAc/B;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,UAAU,CAACM,MAA/B,EAAuCG,CAAC,EAAxC,EAA4C;AAC1CF,IAAAA,EAAE,CAACE,CAAD,CAAF,GAAQT,UAAU,CAACU,UAAX,CAAsBD,CAAtB,CAAR;AACD,GAjB8B,CAmB/B;;;AACA,MAAIE,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACR,EAAD,CAAT,EAAe;AAAES,IAAAA,IAAI,EAAEV;AAAR,GAAf,CAAX;AACA,SAAOQ,IAAP;AACD;AAED;;;;;;;AAKA,OAAO,SAASG,cAAT,GAAoF;AAAA,MAA3DC,QAA2D,uEAAhD,iBAAgD;AAAA,MAA7BC,QAA6B,iFAAf,CAAC,IAAIC,IAAJ,EAAc;AACzF,MAAMC,EAAE,GAAGC,QAAQ,CAACC,aAAT,CAAuBL,QAAvB,CAAX;AACA,SAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA;AACA;AACA;AACA1B,IAAAA,WAAW,CAACqB,EAAD,EAAK;AAAEM,MAAAA,KAAK,EAAE;AAAT,KAAL,CAAX,CAAgDC,IAAhD,CAAqD,UAAAC,MAAM,EAAI;AAC7D;AACA,UAAMC,OAAO,GAAGD,MAAM,CAACE,SAAP,CAAiB,YAAjB,EAA+B,GAA/B,CAAhB;AACA,UAAMjB,IAAI,GAAGb,aAAa,CAAC6B,OAAD,CAA1B;AACA,UAAME,IAAI,GAAG,IAAIC,MAAM,CAACC,IAAX,CAAgB,CAACpB,IAAD,CAAhB,EAAwBK,QAAxB,EAAkC;AAAEH,QAAAA,IAAI,EAAE;AAAR,OAAlC,CAAb;AACAS,MAAAA,OAAO,CAACO,IAAD,CAAP,CAL6D,CAM7D;AACA;AACA;AACA;AACD,KAVD;AAWD,GAhBM,CAAP;AAiBD","sourcesContent":["import html2canvas from 'html2canvas'\r\n\r\n// https://stackoverflow.com/questions/12168909/blob-from-dataurl\r\nfunction dataURItoBlob (dataURI) {\r\n  // convert base64 to raw binary data held in a string\r\n  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this\r\n  var byteString = atob(dataURI.split(',')[1])\r\n\r\n  // separate out the mime component\r\n  var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0]\r\n\r\n  // write the bytes of the string to an ArrayBuffer\r\n  var ab = new ArrayBuffer(byteString.length)\r\n\r\n  // create a view into the buffer\r\n  var ia = new Uint8Array(ab)\r\n\r\n  // set the bytes of the buffer to the correct values\r\n  for (var i = 0; i < byteString.length; i++) {\r\n    ia[i] = byteString.charCodeAt(i)\r\n  }\r\n\r\n  // write the ArrayBuffer to a blob, and you're done\r\n  var blob = new Blob([ab], { type: mimeString })\r\n  return blob\r\n}\r\n\r\n/**\r\n * 生成作品封面图(截图)\r\n * @param {String} selector\r\n * @param {文件名} fileName\r\n */\r\nexport function takeScreenshot (selector = '.canvas-wrapper', fileName = `${+new Date()}`) {\r\n  const el = document.querySelector(selector)\r\n  return new Promise((resolve, reject) => {\r\n    // html2canvas document: https://html2canvas.hertzen.com/configuration\r\n    // allowTaint: Whether to allow cross-origin images to taint the canvas\r\n    // if you use allowTaint: true, the cors image will taint the canvas, and canvas.toDataURL won't work\r\n    // 会对canvas造成污染，导致 canvas.toDataURL 无效\r\n    html2canvas(el, { proxy: '/works/cors-proxy' }).then(canvas => {\r\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL\r\n      const dataUrl = canvas.toDataURL('image/jpeg', 0.6)\r\n      const blob = dataURItoBlob(dataUrl)\r\n      const file = new window.File([blob], fileName, { type: 'image/png' })\r\n      resolve(file)\r\n      // canvas.toBlob(blob => {\r\n      //   const file = new window.File([blob], fileName, { type: 'image/png' })\r\n      //   resolve(file)\r\n      // })\r\n    })\r\n  })\r\n}\r\n"]}]}