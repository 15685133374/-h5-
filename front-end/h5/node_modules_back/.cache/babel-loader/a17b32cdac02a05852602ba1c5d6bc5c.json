{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\element.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\modules\\element.js","mtime":1575526862392},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1575454488217},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _defineProperty from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport Element from \"../../components/core/models/element\";\nimport { getEditorConfigForEditingElement, swapZindex, getVM } from \"../../utils/element\"; // actions\n\nexport var actions = {\n  setEditingElement: function setEditingElement(_ref, payload) {\n    var commit = _ref.commit;\n    commit('setEditingElement', payload);\n    var vm = payload && payload.name ? getEditorConfigForEditingElement(payload.name) : null;\n    commit('setEditingElementEditorConfig', vm);\n    window.getEditorApp.$emit('setEditingElement');\n  },\n  setElementPosition: function setElementPosition(_ref2, payload) {\n    var commit = _ref2.commit;\n    commit('setElementCommonStyle', payload);\n  },\n  setElementShape: function setElementShape(_ref3, payload) {\n    var commit = _ref3.commit;\n    commit('setElementCommonStyle', payload);\n  },\n  recordElementRect: function recordElementRect(_ref4) {\n    var commit = _ref4.commit;\n    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    commit('recordRect', payload);\n  },\n  elementManager: function elementManager(_ref5, payload) {\n    var commit = _ref5.commit;\n    commit('elementManager', payload);\n  }\n}; // mutations\n\nexport var mutations = {\n  setEditingElement: function setEditingElement(state, payload) {\n    state.editingElement = payload;\n  },\n  setEditingElementEditorConfig: function setEditingElementEditorConfig(state, payload) {\n    state.editingElementEditorConfig = payload;\n  },\n  setElementCommonStyle: function setElementCommonStyle(state, payload) {\n    state.editingElement.commonStyle = _objectSpread({}, state.editingElement.commonStyle, {}, payload);\n  },\n  elementManager: function elementManager(state, _ref6) {\n    var type = _ref6.type,\n        value = _ref6.value;\n    var editingPage = state.editingPage,\n        editingElement = state.editingElement;\n    var elements = editingPage.elements;\n    var len = elements.length;\n\n    switch (type) {\n      case 'add':\n        // value.name => pluginName\n        var _value = value,\n            name = _value.name;\n        var vm = getVM(value.name);\n        var props = vm.$options.props;\n        value = _objectSpread({}, value, {\n          zindex: len + 1\n        });\n        var element = new Element({\n          name: name,\n          editorConfig: props\n        });\n        elements.push(element);\n        break;\n\n      case 'copy':\n        elements.push(state.editingElement.clone({\n          zindex: len + 1\n        }));\n        break;\n\n      case 'delete':\n        {\n          var index = elements.findIndex(function (e) {\n            return e.uuid === editingElement.uuid;\n          });\n\n          if (index !== -1) {\n            // let newElements = elements.slice()\n            // newElements.splice(index, 1)\n            // state.editingPage.elements = newElements\n            state.editingPage.elements.splice(index, 1);\n          }\n\n          state.editingElement = null;\n        }\n        break;\n\n      case 'move2Top':\n      case 'move2Bottom':\n        {\n          var _index = elements.findIndex(function (e) {\n            return e.uuid === editingElement.uuid;\n          });\n\n          elements.splice(_index, 1);\n          var newElements = type === 'move2Top' ? [].concat(_toConsumableArray(elements), [editingElement]) : [editingElement].concat(_toConsumableArray(elements));\n          newElements.forEach(function (ele, i, arr) {\n            ele.commonStyle.zindex = i + 1;\n          });\n          state.editingPage.elements = newElements;\n        }\n        break;\n\n      case 'addZindex':\n      case 'minusZindex':\n        var maxZindex = elements.length;\n        var eleZindex = editingElement.commonStyle.zindex;\n        if (eleZindex === maxZindex || eleZindex === 1) return;\n        var flag = type === 'addZindex' ? 1 : -1;\n        var swapElement = elements.find(function (ele) {\n          return ele.commonStyle.zindex === eleZindex + flag * 1;\n        });\n        swapZindex(editingElement, swapElement);\n        break;\n\n      default:\n    }\n  },\n  recordRect: function recordRect(state, _ref7) {\n    var type = _ref7.type,\n        value = _ref7.value;\n  }\n};",null]}