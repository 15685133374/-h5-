{"remainingRequest":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js!D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\plugins\\undo-redo\\History.js","dependencies":[{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\src\\store\\plugins\\undo-redo\\History.js","mtime":1575526862422},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1575454486584},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\babel-loader\\lib\\index.js","mtime":1575361257763},{"path":"D:\\project\\luban\\luban-h5\\front-end\\h5\\node_modules\\@vue\\cli-plugin-eslint\\node_modules\\eslint-loader\\index.js","mtime":1575454465101}],"contextDependencies":[],"result":["import _classCallCheck from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"D:\\\\project\\\\luban\\\\luban-h5\\\\front-end\\\\h5\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/defineProperty\";\nimport { cloneDeep } from 'lodash';\n\nvar UndoRedoHistory =\n/*#__PURE__*/\nfunction () {\n  function UndoRedoHistory() {\n    _classCallCheck(this, UndoRedoHistory);\n\n    _defineProperty(this, \"store\", void 0);\n\n    _defineProperty(this, \"history\", []);\n\n    _defineProperty(this, \"currentIndex\", -1);\n  }\n\n  _createClass(UndoRedoHistory, [{\n    key: \"init\",\n    value: function init(store) {\n      this.store = store;\n    }\n  }, {\n    key: \"addState\",\n    value: function addState(state) {\n      // may be we have to remove redo steps\n      if (this.currentIndex + 1 < this.history.length) {\n        this.history.splice(this.currentIndex + 1);\n      }\n\n      this.history.push(state);\n      this.currentIndex++;\n    }\n  }, {\n    key: \"undo\",\n    value: function undo() {\n      if (!this.canUndo) return;\n      var prevState = this.history[this.currentIndex - 1]; // take a copy of the history state\n      // because it would be changed during store mutations\n      // what would corrupt the undo-redo-history\n      // (same on redo)\n\n      this.store.replaceState(cloneDeep(prevState));\n      this.currentIndex--;\n    }\n  }, {\n    key: \"redo\",\n    value: function redo() {\n      if (!this.canRedo) return;\n      var nextState = this.history[this.currentIndex + 1];\n      this.store.replaceState(cloneDeep(nextState));\n      this.currentIndex++;\n    }\n  }, {\n    key: \"canUndo\",\n    get: function get() {\n      return this.currentIndex > 0;\n    }\n  }, {\n    key: \"canRedo\",\n    get: function get() {\n      return this.history.length > this.currentIndex + 1;\n    }\n  }]);\n\n  return UndoRedoHistory;\n}();\n\nvar undoRedoHistory = new UndoRedoHistory();\nexport default undoRedoHistory;",{"version":3,"sources":["D:/project/luban/luban-h5/front-end/h5/src/store/plugins/undo-redo/History.js"],"names":["cloneDeep","UndoRedoHistory","store","state","currentIndex","history","length","splice","push","canUndo","prevState","replaceState","canRedo","nextState","undoRedoHistory"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,QAA1B;;IAEMC,e;;;;;;;;qCAEQ,E;;0CACK,CAAC,C;;;;;yBAUVC,K,EAAO;AACX,WAAKA,KAAL,GAAaA,KAAb;AACD;;;6BAESC,K,EAAO;AACf;AACA,UAAI,KAAKC,YAAL,GAAoB,CAApB,GAAwB,KAAKC,OAAL,CAAaC,MAAzC,EAAiD;AAC/C,aAAKD,OAAL,CAAaE,MAAb,CAAoB,KAAKH,YAAL,GAAoB,CAAxC;AACD;;AACD,WAAKC,OAAL,CAAaG,IAAb,CAAkBL,KAAlB;AACA,WAAKC,YAAL;AACD;;;2BAEO;AACN,UAAI,CAAC,KAAKK,OAAV,EAAmB;AACnB,UAAMC,SAAS,GAAG,KAAKL,OAAL,CAAa,KAAKD,YAAL,GAAoB,CAAjC,CAAlB,CAFM,CAGN;AACA;AACA;AACA;;AACA,WAAKF,KAAL,CAAWS,YAAX,CAAwBX,SAAS,CAACU,SAAD,CAAjC;AACA,WAAKN,YAAL;AACD;;;2BAEO;AACN,UAAI,CAAC,KAAKQ,OAAV,EAAmB;AACnB,UAAMC,SAAS,GAAG,KAAKR,OAAL,CAAa,KAAKD,YAAL,GAAoB,CAAjC,CAAlB;AACA,WAAKF,KAAL,CAAWS,YAAX,CAAwBX,SAAS,CAACa,SAAD,CAAjC;AACA,WAAKT,YAAL;AACD;;;wBArCc;AACb,aAAO,KAAKA,YAAL,GAAoB,CAA3B;AACD;;;wBAEc;AACb,aAAO,KAAKC,OAAL,CAAaC,MAAb,GAAsB,KAAKF,YAAL,GAAoB,CAAjD;AACD;;;;;;AAkCL,IAAMU,eAAe,GAAG,IAAIb,eAAJ,EAAxB;AAEA,eAAea,eAAf","sourcesContent":["import { cloneDeep } from 'lodash'\r\n\r\nclass UndoRedoHistory {\r\n    store;\r\n    history = [];\r\n    currentIndex = -1;\r\n\r\n    get canUndo () {\r\n      return this.currentIndex > 0\r\n    }\r\n\r\n    get canRedo () {\r\n      return this.history.length > this.currentIndex + 1\r\n    }\r\n\r\n    init (store) {\r\n      this.store = store\r\n    }\r\n\r\n    addState (state) {\r\n      // may be we have to remove redo steps\r\n      if (this.currentIndex + 1 < this.history.length) {\r\n        this.history.splice(this.currentIndex + 1)\r\n      }\r\n      this.history.push(state)\r\n      this.currentIndex++\r\n    }\r\n\r\n    undo () {\r\n      if (!this.canUndo) return\r\n      const prevState = this.history[this.currentIndex - 1]\r\n      // take a copy of the history state\r\n      // because it would be changed during store mutations\r\n      // what would corrupt the undo-redo-history\r\n      // (same on redo)\r\n      this.store.replaceState(cloneDeep(prevState))\r\n      this.currentIndex--\r\n    }\r\n\r\n    redo () {\r\n      if (!this.canRedo) return\r\n      const nextState = this.history[this.currentIndex + 1]\r\n      this.store.replaceState(cloneDeep(nextState))\r\n      this.currentIndex++\r\n    }\r\n}\r\n\r\nconst undoRedoHistory = new UndoRedoHistory()\r\n\r\nexport default undoRedoHistory\r\n"]}]}